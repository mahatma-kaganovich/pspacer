diff -uprN libnl-1.0-pre6.orig/include/linux/pkt_sched.h libnl-1.0-pre6/include/linux/pkt_sched.h
--- libnl-1.0-pre6.orig/include/linux/pkt_sched.h	2006-08-17 22:57:31.000000000 +0900
+++ libnl-1.0-pre6/include/linux/pkt_sched.h	2008-01-21 13:38:17.000000000 +0900
@@ -461,4 +461,43 @@ struct tc_netem_reorder
 
 #define NETEM_DIST_SCALE	8192
 
+/* PSPacer section */
+
+enum
+{
+	TCA_PSP_UNSPEC,
+	TCA_PSP_COPT,
+	TCA_PSP_QOPT,
+	__TCA_PSP_MAX,
+};
+
+#define TCA_PSP_MAX (__TCA_PSP_MAX - 1)
+
+enum {
+	TC_PSP_MODE_NORMAL = 0,
+	TC_PSP_MODE_STATIC = 1,
+	TC_PSP_MODE_DYNAMIC = 2
+};
+
+struct tc_psp_copt
+{
+	__u32	level;
+	__u32	mode;
+	__u32	rate;
+};
+
+struct tc_psp_qopt
+{
+	__u32	defcls;
+	__u32	rate;
+	__u32	direct_pkts;
+	__u32	ifg;
+};
+
+struct tc_psp_xstats
+{
+	__u32	bytes;		/* gap packet statistics */
+	__u32	packets;
+};
+
 #endif
diff -uprN libnl-1.0-pre6.orig/include/netlink/route/sch/psp.h libnl-1.0-pre6/include/netlink/route/sch/psp.h
--- libnl-1.0-pre6.orig/include/netlink/route/sch/psp.h	1970-01-01 09:00:00.000000000 +0900
+++ libnl-1.0-pre6/include/netlink/route/sch/psp.h	2008-01-21 13:38:17.000000000 +0900
@@ -0,0 +1,37 @@
+/*
+ * netlink/route/sch/psp.h	PSP Qdisc
+ *
+ *	This library is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU Lesser General Public
+ *	License as published by the Free Software Foundation version 2.1
+ *	of the License.
+ *
+ * Copyright (c) 2003-2006 Thomas Graf <tgraf@suug.ch>
+ * Copyright (c) 2007-2008 National Institute of Advanced Industrial
+ * Science and Technology (AIST), Japan.
+ */
+
+#ifndef NETLINK_PSP_H_
+#define NETLINK_PSP_H_
+
+#include <netlink/netlink.h>
+#include <netlink/route/tc.h>
+
+/**/
+extern int rtnl_psp_set_defcls(struct rtnl_qdisc *, uint32_t);
+extern int rtnl_psp_get_defcls(struct rtnl_qdisc *);
+
+extern int rtnl_psp_set_totalrate(struct rtnl_qdisc *, uint32_t);
+extern int rtnl_psp_get_totalrate(struct rtnl_qdisc *);
+
+extern int rtnl_psp_set_ifg(struct rtnl_qdisc *, uint32_t);
+extern int rtnl_psp_get_ifg(struct rtnl_qdisc *);
+
+/**/
+extern int rtnl_psp_set_rate(struct rtnl_class *, uint32_t);
+extern int rtnl_psp_get_rate(struct rtnl_class *);
+
+extern int rtnl_psp_set_mode(struct rtnl_class *, uint32_t);
+extern int rtnl_psp_get_mode(struct rtnl_class *);
+
+#endif
diff -uprN libnl-1.0-pre6.orig/include/netlink-types.h libnl-1.0-pre6/include/netlink-types.h
--- libnl-1.0-pre6.orig/include/netlink-types.h	2006-08-17 22:57:31.000000000 +0900
+++ libnl-1.0-pre6/include/netlink-types.h	2008-01-21 13:38:17.000000000 +0900
@@ -682,6 +682,22 @@ struct rtnl_red
 	uint32_t	qr_mask;
 };
 
+struct rtnl_psp_qdisc
+{
+	uint32_t	qp_defcls;
+	uint32_t	qp_totalrate;
+	uint32_t	qp_ifg;
+	uint32_t	qp_mask;
+};
+
+struct rtnl_psp_class
+{
+	uint32_t	cp_level;
+	uint32_t	cp_mode;
+	uint32_t	cp_rate;
+	uint32_t	cp_mask;
+};
+
 struct flnl_request
 {
 	struct nl_addr *	lr_addr;
diff -uprN libnl-1.0-pre6.orig/lib/route/sch/psp.c libnl-1.0-pre6/lib/route/sch/psp.c
--- libnl-1.0-pre6.orig/lib/route/sch/psp.c	1970-01-01 09:00:00.000000000 +0900
+++ libnl-1.0-pre6/lib/route/sch/psp.c	2008-01-21 13:49:54.000000000 +0900
@@ -0,0 +1,477 @@
+/*
+ * lib/route/sch/psp.c	PSP Qdisc
+ *
+ *	This library is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU Lesser General Public
+ *	License as published by the Free Software Foundation version 2.1
+ *	of the License.
+ *
+ * Copyright (c) 2003-2006 Thomas Graf <tgraf@suug.ch>
+ * Copyright (c) 2007 National Institute of Advanced Industrial
+ * Science and Technology (AIST), Japan.
+ */
+
+/**
+ * @ingroup qdisc
+ * @ingroup class
+ * @defgroup psp Precise Software Pacer (PSP)
+ * @{
+ */
+
+#include <netlink-local.h>
+#include <netlink-tc.h>
+#include <netlink/netlink.h>
+#include <netlink/cache.h>
+#include <netlink/utils.h>
+#include <netlink/route/tc.h>
+#include <netlink/route/qdisc.h>
+#include <netlink/route/qdisc-modules.h>
+#include <netlink/route/class.h>
+#include <netlink/route/class-modules.h>
+#include <netlink/route/link.h>
+#include <netlink/route/sch/psp.h>
+
+/** @cond SKIP */
+#define SCH_PSP_ATTR_DEFCLS	0x01
+#define SCH_PSP_ATTR_TOTALRATE	0x02
+#define SCH_PSP_ATTR_IFG	0x04
+
+#define SCH_PSP_ATTR_LEVEL	0x01
+#define SCH_PSP_ATTR_RATE	0x02
+#define SCH_PSP_ATTR_MODE	0x04
+/** @endcond */
+
+static inline struct rtnl_psp_qdisc *psp_qdisc(struct rtnl_qdisc *qdisc)
+{
+	if (qdisc->q_subdata == NULL)
+		qdisc->q_subdata = calloc(1, sizeof(struct rtnl_psp_qdisc));
+
+	return (struct rtnl_psp_qdisc *) qdisc->q_subdata;
+}
+
+static struct nla_policy psp_policy[TCA_PSP_MAX + 1] = {
+	[TCA_PSP_QOPT] = { .minlen = sizeof(struct tc_psp_qopt) },
+	[TCA_PSP_COPT] = { .minlen = sizeof(struct tc_psp_copt) },
+};
+
+static int psp_qdisc_msg_parser(struct rtnl_qdisc *qdisc)
+{
+	int err;
+	struct nlattr *tb[TCA_PSP_MAX + 1];
+	struct rtnl_psp_qdisc *d;
+
+	err = tca_parse(tb, TCA_PSP_MAX, (struct rtnl_tca *) qdisc,
+			psp_policy);
+	if (err < 0)
+		return err;
+
+	d = psp_qdisc(qdisc);
+	if (!d)
+		return nl_errno(ENOMEM);
+
+	if (tb[TCA_PSP_QOPT]) {
+		struct tc_psp_qopt qopts;
+
+		nla_memcpy(&qopts, tb[TCA_PSP_QOPT], sizeof(qopts));
+		d->qp_defcls = qopts.defcls;
+		d->qp_totalrate = qopts.rate;
+		d->qp_ifg = qopts.ifg;
+
+		d->qp_mask = (SCH_PSP_ATTR_DEFCLS | SCH_PSP_ATTR_TOTALRATE
+			      | SCH_PSP_ATTR_IFG);
+	}
+
+	return 0;
+}
+
+static void psp_qdisc_free_data(struct rtnl_qdisc *qdisc)
+{
+	free(qdisc->q_subdata);
+}
+
+static inline struct rtnl_psp_class *psp_class(struct rtnl_class *class)
+{
+	if (class->c_subdata == NULL)
+		class->c_subdata = calloc(1, sizeof(struct rtnl_psp_class));
+
+	return (struct rtnl_psp_class *) class->c_subdata;
+}
+
+static int psp_class_msg_parser(struct rtnl_class *class)
+{
+	int err;
+	struct nlattr *tb[TCA_PSP_MAX + 1];
+	struct rtnl_psp_class *d;
+
+	err = tca_parse(tb, TCA_PSP_MAX, (struct rtnl_tca *) class,
+			psp_policy);
+	if (err < 0)
+		return err;
+	
+	d = psp_class(class);
+	if (!d)
+		return nl_errno(ENOMEM);
+
+	if (tb[TCA_PSP_COPT]) {
+		struct tc_psp_copt copts;
+
+		nla_memcpy(&copts, tb[TCA_PSP_COPT], sizeof(copts));
+		d->cp_level = copts.level;
+		d->cp_mode = copts.mode;
+		d->cp_rate = copts.rate;
+
+		d->cp_mask = (SCH_PSP_ATTR_LEVEL | SCH_PSP_ATTR_MODE
+			      | SCH_PSP_ATTR_RATE);
+	}
+
+	return 0;
+}
+
+static void psp_class_free_data(struct rtnl_class *class)
+{
+	free(class->c_subdata);
+}
+
+static int psp_qdisc_dump_brief(struct rtnl_qdisc *qdisc,
+				struct nl_dump_params *p, int line)
+{
+	struct rtnl_psp_qdisc *d = (struct rtnl_psp_qdisc *) qdisc->q_subdata;
+
+	if (d == NULL)
+		goto ignore;
+
+	if (d->qp_mask & SCH_PSP_ATTR_TOTALRATE)
+		dp_dump(p, " totalrate %u", d->qp_totalrate);
+
+	if (d->qp_mask & SCH_PSP_ATTR_DEFCLS) {
+		char buf[32];
+		dp_dump(p, " default %s",
+			rtnl_tc_handle2str(d->qp_defcls, buf, sizeof(buf)));
+	}
+
+	if (d->qp_mask & SCH_PSP_ATTR_IFG)
+		dp_dump(p, " ifg %u", d->qp_ifg);
+
+ignore:
+	return line;
+}
+
+static int psp_class_dump_brief(struct rtnl_class *class,
+				struct nl_dump_params *p, int line)
+{
+	struct rtnl_psp_class *d = (struct rtnl_psp_class *) class->c_subdata;
+
+	if (d == NULL)
+		goto ignore;
+
+	if (d->cp_mask & SCH_PSP_ATTR_LEVEL)
+		dp_dump(p, " level %u", d->cp_level);
+
+	if (d->cp_mask & SCH_PSP_ATTR_MODE) {
+		dp_dump(p, " mode %u", d->cp_mode);
+		if (d->cp_mode != TC_PSP_MODE_NORMAL) {
+			if (d->cp_mask & SCH_PSP_ATTR_RATE) {
+				double r, rbit;
+				char *ru, *rubit;
+
+				r = nl_cancel_down_bytes(d->cp_rate, &ru);
+				rbit = nl_cancel_down_bits(d->cp_rate*8, 
+							   &rubit);
+
+				dp_dump(p, " rate %.2f%s/s (%.0f%s)",
+					r, ru, rbit, rubit);
+			}
+		}
+	}
+
+ignore:
+	return line;
+}
+
+static int psp_class_dump_full(struct rtnl_class *class,
+			       struct nl_dump_params *p, int line)
+{
+	struct rtnl_psp_class *d = (struct rtnl_psp_class *) class->c_subdata;
+
+	if (d == NULL)
+		goto ignore;
+
+ignore:
+	return line;
+}
+
+static struct nl_msg *psp_qdisc_get_opts(struct rtnl_qdisc *qdisc)
+{
+	struct rtnl_psp_qdisc *d = (struct rtnl_psp_qdisc *) qdisc->q_subdata;
+	struct tc_psp_qopt qopts;
+	struct nl_msg *msg;
+
+	if (d == NULL)
+		return NULL;
+
+	msg = nlmsg_build(NULL);
+	if (msg == NULL)
+		return NULL;
+
+	memset(&qopts, 0, sizeof(qopts));
+
+	if (d->qp_mask & SCH_PSP_ATTR_DEFCLS)
+		qopts.defcls = d->qp_defcls;
+	if (d->qp_mask & SCH_PSP_ATTR_TOTALRATE)
+		qopts.rate = d->qp_totalrate;
+	if (d->qp_mask & SCH_PSP_ATTR_IFG)
+		qopts.ifg = d->qp_ifg;
+
+	nla_put(msg, TCA_PSP_QOPT, sizeof(qopts), &qopts);
+
+	return msg;
+}
+
+static struct nl_msg *psp_class_get_opts(struct rtnl_class *class)
+{
+	struct rtnl_psp_class *d = (struct rtnl_psp_class *) class->c_subdata;
+	struct tc_psp_copt copts;
+	struct nl_msg *msg;
+
+	if (d == NULL)
+		return NULL;
+
+	msg = nlmsg_build(NULL);
+	memset(&copts, 0, sizeof(copts));
+
+	if (d->cp_mask & SCH_PSP_ATTR_LEVEL)
+		copts.level = d->cp_level;
+
+	if (d->cp_mask & SCH_PSP_ATTR_MODE)
+		copts.mode = d->cp_mode;
+
+	if (d->cp_mask & SCH_PSP_ATTR_RATE) {
+		copts.rate = d->cp_rate;
+	} else {
+		if (copts.mode != TC_PSP_MODE_NORMAL)
+			BUG();
+	}
+
+
+	nla_put(msg, TCA_PSP_COPT, sizeof(copts), &copts);
+
+	return msg;
+}
+
+/**
+ * @name Attribute Modifications
+ * @{
+ */
+
+/**
+ * Set default class of the psp qdisc to the specified value.
+ * @arg qdisc		psp qdisc.
+ * @arg defcls		new default class.
+ * @return 0 or a negative error code.
+ */
+int rtnl_psp_set_defcls(struct rtnl_qdisc *qdisc, uint32_t defcls)
+{
+	struct rtnl_psp_qdisc *q;
+
+	q = psp_qdisc(qdisc);
+	if (q == NULL)
+		return nl_errno(ENOMEM);
+
+	q->qp_defcls = defcls;
+	q->qp_mask |= SCH_PSP_ATTR_DEFCLS;
+
+	return 0;
+}
+
+/**
+ * Get default class of the psp qdisc to the specified value.
+ * @arg qdisc		psp qdisc.
+ * @return Numeric default class or a negative error code.
+ */
+int rtnl_psp_get_defcls(struct rtnl_qdisc *qdisc)
+{
+	struct rtnl_psp_qdisc *q;
+
+	q = psp_qdisc(qdisc);
+	if (q && q->qp_mask & SCH_PSP_ATTR_DEFCLS)
+		return q->qp_defcls;
+	else
+		return nl_errno(ENOMEM);
+}
+
+/**
+ * Set total rate of a psp qdisc.
+ * @arg qdisc		psp qdisc.
+ * @arg rate		new total rate.
+ * @return 0 or a negative error code.
+ */
+int rtnl_psp_set_totalrate(struct rtnl_qdisc *qdisc, uint32_t rate)
+{
+	struct rtnl_psp_qdisc *q;
+
+	q = psp_qdisc(qdisc);
+	if (q == NULL)
+		return nl_errno(ENOMEM);
+
+	q->qp_totalrate = rate;
+	q->qp_mask |= SCH_PSP_ATTR_TOTALRATE;
+
+	return 0;
+}
+
+/**
+ * Get total rate of a psp qdisc.
+ * @arg qdisc		psp qdisc.
+ * @return Numeric total rate or a negative error code.
+ */
+int rtnl_psp_get_totalrate(struct rtnl_qdisc *qdisc)
+{
+	struct rtnl_psp_qdisc *q;
+
+	q = psp_qdisc(qdisc);
+	if (q && q->qp_mask & SCH_PSP_ATTR_TOTALRATE)
+		return q->qp_totalrate;
+	else
+		return nl_errno(ENOMEM);
+}
+
+/**
+ * Set inter frame gap size of a psp qdisc.
+ * @arg qdisc		psp qdisc.
+ * @arg rate		new ifg size.
+ * @return 0 or a negative error code.
+ */
+int rtnl_psp_set_ifg(struct rtnl_qdisc *qdisc, uint32_t ifg)
+{
+	struct rtnl_psp_qdisc *q;
+
+	q = psp_qdisc(qdisc);
+	if (q == NULL)
+		return nl_errno(ENOMEM);
+
+	q->qp_ifg = ifg;
+	q->qp_mask |= SCH_PSP_ATTR_IFG;
+
+	return 0;
+}
+
+/**
+ * Get inter frame gap size of a psp qdisc.
+ * @arg qdisc		psp qdisc.
+ * @return Numeric ifg size or a negative error code.
+ */
+int rtnl_psp_get_ifg(struct rtnl_qdisc *qdisc)
+{
+	struct rtnl_psp_qdisc *q;
+
+	q = psp_qdisc(qdisc);
+	if (q && q->qp_mask & SCH_PSP_ATTR_IFG)
+		return q->qp_ifg;
+	else
+		return nl_errno(ENOMEM);
+}
+
+/**
+ * Set rate of a psp class.
+ * @arg class		psp class.
+ * @arg rate		new rate.
+ * @return 0 or a negative error code.
+ */
+int rtnl_psp_set_rate(struct rtnl_class *class, uint32_t rate)
+{
+	struct rtnl_psp_class *c;
+
+	c = psp_class(class);
+	if (c == NULL)
+		return nl_errno(ENOMEM);
+
+	c->cp_rate = rate;
+	c->cp_mask |= SCH_PSP_ATTR_RATE;
+
+	return 0;
+}
+
+/**
+ * Get rate of a psp class.
+ * @arg class		psp class.
+ * @return Numeric rate or a negative error code.
+ */
+int rtnl_psp_get_rate(struct rtnl_class *class)
+{
+	struct rtnl_psp_class *c;
+
+	c = psp_class(class);
+	if (c && c->cp_mask & SCH_PSP_ATTR_RATE)
+		return c->cp_rate;
+	else
+		return nl_errno(ENOMEM);
+}
+
+/**
+ * Set mode of a psp class.
+ * @arg class		psp class.
+ * @arg mode		new mode.
+ * @return 0 or a negative error code.
+ */
+int rtnl_psp_set_mode(struct rtnl_class *class, uint32_t mode)
+{
+	struct rtnl_psp_class *c;
+
+	c = psp_class(class);
+	if (c == NULL)
+		return nl_errno(ENOMEM);
+
+	c->cp_mode = mode;
+	c->cp_mask |= SCH_PSP_ATTR_MODE;
+
+	return 0;
+}
+
+/**
+ * Get mode of a psp class.
+ * @arg class		psp class.
+ * @return Numeric mode or a negative error code.
+ */
+int rtnl_psp_get_mode(struct rtnl_class *class)
+{
+	struct rtnl_psp_class *c;
+
+	c = psp_class(class);
+	if (c && c->cp_mask & SCH_PSP_ATTR_MODE)
+		return c->cp_mode;
+	else
+		return nl_errno(ENOMEM);
+}
+
+/** @} */
+
+static struct rtnl_qdisc_ops psp_qdisc_ops = {
+	.qo_kind		= "psp",
+	.qo_msg_parser		= psp_qdisc_msg_parser,
+	.qo_free_data		= psp_qdisc_free_data,
+	.qo_dump[NL_DUMP_BRIEF]	= psp_qdisc_dump_brief,
+	.qo_get_opts		= psp_qdisc_get_opts,
+};
+
+static struct rtnl_class_ops psp_class_ops = {
+	.co_kind		= "psp",
+	.co_msg_parser		= psp_class_msg_parser,
+	.co_free_data		= psp_class_free_data,
+	.co_dump[NL_DUMP_BRIEF]	= psp_class_dump_brief,
+	.co_dump[NL_DUMP_FULL]	= psp_class_dump_full,
+	.co_get_opts		= psp_class_get_opts,
+};
+
+static void __init psp_init(void)
+{
+	rtnl_qdisc_register(&psp_qdisc_ops);
+	rtnl_class_register(&psp_class_ops);
+}
+
+static void __exit psp_exit(void)
+{
+	rtnl_qdisc_unregister(&psp_qdisc_ops);
+	rtnl_class_unregister(&psp_class_ops);
+}
+
+/** @} */
