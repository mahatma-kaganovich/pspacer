PSPacer (sch_psp) のアルゴリズムについて

概要

PSPacer は送信時間を決定するために，実時間ではなく，送信バイト数を仮想クロック
として用いる．各(ペーシング)クラスは，パケットの送信可能時間を仮想クロックとして
保持する．アイドル時間，つまりパケット送信可能なクラスが存在しない場合は，タイマ
関数で待つ代わりに，ギャップパケットを送信する．


用語 (termnology)

ペーシング (pacing):
	* パケット間の送信間隔を調整することで，バーストを平滑化し，送信レート
	  を均一にする手法．

クラス (class):
	* PSPacer には，ターゲットレートに対してペーシングするペーシングクラス
	  と，ペーシングを行わないノーマルクラスが存在する．
	* クラスは一つ以上のサブクラスか Qdisc を持つことができる．

モード (mode):
	* クラスには，次の3モードが存在する．
		* normal (0)
		  ノーマルクラスを意味する．
		* static (1)
		  ペーシングクラスであり，ターゲットレートは静的に指定する．
		* dynamic (2)
		  ペーシングクラスであり，ターゲットレートは RTT と輻輳
		  ウィンドウサイズから見積もる (TCP だけに適用される)．

ギャップパケット (gap packet):
	* アイドル時間を制御するために送信するダミーパケットをギャップパケット
	  と呼ぶ．ギャップパケットは，実際にインタフェースから送出されるパケット
	  であり，IEEE 802.3x で定義されている PAUSE パケットを利用する．
	* アイドル時間を仮想クロックで表した値をギャップサイズと呼ぶ．ギャップ
	  サイズが MTU より大きい場合は，複数のギャップパケットを送出する．
	* 1パケットをターゲットレートで送信する時間(式(1)左式)は，そのパケット
	  とギャップサイズ分のギャップパケットを，インタフェースの物理帯域
	  (max_rate)で送信する時間(式(1)右式)に等しい．

	  packet_size   packet_size + gapsize
	  ----------- = ---------------------  ... (1)
	  target_rate         max_rate

	  式(1)を展開すると，次式が得られる．

	            max_rate * packet_size
	  gapsize = ---------------------- - packet_size  ... (2)
	                 target_rate


ペーシングアルゴリズム
	* Qdisc は，仮想クロックを示す変数 clock (以下，Qdisc clock と記す) を
	  持ち，パケット送信毎に Qdisc clock をパケットサイズ分進める．
	* 各ペーシングクラスは，それぞれパケットが送信可能になる仮想クロックを
	  示す変数 clock (以下，class clock と記す) と，式(2)より得られる
	  ギャップサイズを示す変数 gapsize を持つ．
	* ペーシングクラスでは，class clock が Qdisc clock より小さいときだけ，
	  パケットを送信できる．そして，パケット送信後，class clock を(パケット
	  サイズ + ギャップサイズ)分進める．
	* class clock が Qdisc clock より小さいが，そのクラスにパケットが
	  キューイングされてない場合は，通信が停止していると判断し，次にパケット
	  を送信するときに class clock をリセットする(Qdisc clock に合わせる)．
	* パケットを送信できるペーシングクラスが存在しない場合は，ノーマルクラス
	  のパケットを送信し，さらに，ノーマルクラスにもパケットが存在しない場合
	  (アイドル時間)は，ギャップパケットを送信する．
	* ギャップパケットを送信するとき，ギャップサイズは各 class clock と
	  Qdisc clock の差分の最小値に設定する．

	* dequeue 処理の疑似コードを次に示す．

	# q: qdisc, cl: class, skb: sk_buff
	def dequeue(q):
	    cl, gaplen = lookup_next_class(q)
	    if cl != NULL:
	        skb = cl->dequeue()		# dequeue from sub-Qdisc
	    else:
	        skb = insert_gap_packet(gaplen)
	    update_clocks(skb, q, cl)
	    return skb
	
	def lookup_next_class(q):
	    gaplen = mtu

	    # lookup from pacing classes
	    next = NULL
	    for cl in pacing_class_list:
	        diff = cl->clock - q->clock
		if diff > 0:			# update next gap packet size
		    if gaplen > diff:
		        gaplen = diff
		    continue
	        if cl is not active:
		    cl->flag |= DMARK		# set reset mark
		    continue

		if next == NULL:
		    nexr = cl
	    if next != NULL:
	        return next, 0

	    # lookup from normal classes
	    for cl in normal_class_list:
	        if cl is ready:
	            return cl, 0

	    return NULL, gaplen
	
	def update_clocks(skb, q, cl):
	    q->clock += skb->len
	    if cl == NULL or cl is not pacing class:
	        return
	    if !(cl->flag & ~DMARK):
	        cl->clock += skb->len + cl->gapsize
	    else:
	        cl->clock = q->clock + cl->gapsize  # reset class clock
	        cl->flag &= ~DMARK


      * 二つのペーシングクラス P1 (500 Mbps)，P2 (250 Mbps) が存在する場合の
        動作の流れを以下に示す．それぞれのギャップパケットサイズは 1500B，
	4500B である．

1: P1 が送信される
  qdisc clock  ==>			# q->clock += 1500
   P1's clock  =====>			# cl->clock += (1500 + 1500)
   P2's clock  

2: P2 が送信される
  qdisc clock  -->==>			# q->clock += 1500
   P1's clock  ----->
   P2's clock  ===========>		# cl->clock += (1500 + 3500)

3: P1 が送信される
  qdisc clock  -->-->==>		# q->clock += 1500
   P1's clock  ----->=====>		# cl->clock += (1500 + 1500)
   P2's clock  ----------->

4: P1，P2 の class clock は Qdisc clock より進んでいるので，ギャップパケットが
   送信される
  qdisc clock  -->-->-->==>		# q->clock += 1500
   P1's clock  ----->----->
   P2's clock  ----------->

5: 1 に戻る
